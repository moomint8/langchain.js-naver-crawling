import { BaseChatMessageHistory, BaseListChatMessageHistory } from "../chat_history.js";
import { BaseMessage } from "../messages/index.js";
import { Run } from "../tracers/base.js";
import { Runnable, RunnableBinding, type RunnableBindingArgs } from "./base.js";
import { RunnableConfig } from "./config.js";
type GetSessionHistoryCallable = (...args: Array<any>) => Promise<BaseChatMessageHistory | BaseListChatMessageHistory> | BaseChatMessageHistory | BaseListChatMessageHistory;
export interface RunnableWithMessageHistoryInputs<RunInput, RunOutput> extends Omit<RunnableBindingArgs<RunInput, RunOutput>, "bound" | "config"> {
    runnable: Runnable<RunInput, RunOutput>;
    getMessageHistory: GetSessionHistoryCallable;
    inputMessagesKey?: string;
    outputMessagesKey?: string;
    historyMessagesKey?: string;
    config?: RunnableConfig;
}
export declare class RunnableWithMessageHistory<RunInput, RunOutput> extends RunnableBinding<RunInput, RunOutput> {
    runnable: Runnable<RunInput, RunOutput>;
    inputMessagesKey?: string;
    outputMessagesKey?: string;
    historyMessagesKey?: string;
    getMessageHistory: GetSessionHistoryCallable;
    constructor(fields: RunnableWithMessageHistoryInputs<RunInput, RunOutput>);
    _getInputMessages(inputValue: string | BaseMessage | Array<BaseMessage>): Array<BaseMessage>;
    _getOutputMessages(outputValue: string | BaseMessage | Array<BaseMessage> | Record<string, any>): Array<BaseMessage>;
    _enterHistory(input: any, kwargs?: {
        config?: RunnableConfig;
    }): Promise<BaseMessage[]>;
    _exitHistory(run: Run, config: RunnableConfig): Promise<void>;
    _mergeConfig(...configs: Array<RunnableConfig | undefined>): Promise<Partial<RunnableConfig>>;
}
export {};
